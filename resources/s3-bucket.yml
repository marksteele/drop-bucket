Resources:
  S3BucketFiles:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:  ${self:custom.fileBucketName}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
             SSEAlgorithm: "AES256"
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 7
            Status: Enabled
      CorsConfiguration:
        CorsRules:
          -
            AllowedOrigins:
              - '*'
            AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            ExposedHeaders:
              - ETag
            MaxAge: 3000
      NotificationConfiguration:
        LambdaConfigurations:
        - Event: 's3:ObjectCreated:*'
          Function: 
            "Fn::GetAtt":
              - ScanLambdaFunction
              - Arn
  VirusDefsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:  ${self:custom.avDefsBucketName}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
             SSEAlgorithm: "AES256"
  UIBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:  ${self:custom.client.bucketName}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
             SSEAlgorithm: "AES256"
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy  
    Properties:
      Bucket:
        Ref: S3BucketFiles
      PolicyDocument:
        Statement:
        - Sid: DenyUnEncryptedObjectUploads
          Effect: Deny
          Principal: "*"
          Action: s3:PutObject
          Resource: "arn:aws:s3:::${self:custom.fileBucketName}/*"
          Condition:
            StringNotEquals:
              s3:x-amz-server-side-encryption: AES256
        - Sid: DenyAccessToInfectedFiles
          Effect: Deny
          Principal: "*"
          Action:
            - s3:GetObject
            - s3:PutObjectTagging
          Resource: "arn:aws:s3:::${self:custom.fileBucketName}/*"
          Condition:
            StringEquals:
              "s3:ExistingObjectTag/virusScanStatus": "INFECTED"
  S3BucketFilesLambdaPermission:
      Type: "AWS::Lambda::Permission"
      Properties:
        FunctionName:
          "Fn::GetAtt":
            - ScanLambdaFunction
            - Arn
        Principal: "s3.amazonaws.com"
        Action: "lambda:InvokeFunction"
        SourceAccount:
          Ref: AWS::AccountId
        SourceArn: "arn:aws:s3:::${self:custom.fileBucketName}"

Outputs:
  FileBucketName:
    Value:
      Ref: S3BucketFiles
  VirusDefsBucketName:
    Value:
      Ref: VirusDefsBucket
  UIBucketName:
    Value:
      Ref: UIBucket
